
# Use same base image as microservice
FROM mcr.microsoft.com/dotnet/framework/aspnet:4.7.2-windowsservercore-ltsc2019
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

RUN mkdir C:\\go

####################################
# Install go
# From https://github.com/docker-library/golang/blob/ad65a7b21b2689de3a15334a7db2917a3b9216ec/1.16/windows/windowsservercore-ltsc2016/Dockerfile
####################################
# install MinGit (especially for "go get")
# https://blogs.msdn.microsoft.com/visualstudioalm/2016/09/03/whats-new-in-git-for-windows-2-10/
# "Essentially, it is a Git for Windows that was stripped down as much as possible without sacrificing the functionality in which 3rd-party software may be interested."
# "It currently requires only ~45MB on disk."
ENV GIT_VERSION 2.23.0
ENV GIT_TAG v${GIT_VERSION}.windows.1
ENV GIT_DOWNLOAD_URL https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip
ENV GIT_DOWNLOAD_SHA256 8f65208f92c0b4c3ae4c0cf02d4b5f6791d539cd1a07b2df62b7116467724735
# steps inspired by "chcolateyInstall.ps1" from "git.install" (https://chocolatey.org/packages/git.install)
RUN Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL); \
	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
	Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip'; \
	\
	Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \
	if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \
		Write-Host 'FAILED!'; \
		exit 1; \
	}; \
	\
	Write-Host 'Expanding ...'; \
	Expand-Archive -Path git.zip -DestinationPath C:\git\.; \
	\
	Write-Host 'Removing ...'; \
	Remove-Item git.zip -Force; \
	\
	Write-Host 'Updating PATH ...'; \
	$env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH; \
	[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \
	\
	Write-Host 'Verifying install ("git version") ...'; \
	git version; \
	\
	Write-Host 'Complete.';

# ideally, this would be C:\go to match Linux a bit closer, but C:\go is the recommended install path for Go itself on Windows
ENV GOPATH C:\\gopath

# PATH isn't actually set in the Docker image, so we have to set it from within the container
RUN $newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH); \
	Write-Host ('Updating PATH: {0}' -f $newPath); \
	[Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);
# doing this first to share cache across versions more aggressively

ENV GOLANG_VERSION 1.8.7

RUN $url = 'https://dl.google.com/go/go1.8.7.windows-amd64.zip'; \
	Write-Host ('Downloading {0} ...' -f $url); \
	Invoke-WebRequest -Uri $url -OutFile 'go.zip'; \
	\
	$sha256 = '633a28e72b95e8372e5416dd4723881d7a7109be08daf097ebce2679939f6a82'; \
	Write-Host ('Verifying sha256 ({0}) ...' -f $sha256); \
	if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \
		Write-Host 'FAILED!'; \
		exit 1; \
	}; \
	\
	Write-Host 'Expanding ...'; \
	Expand-Archive go.zip -DestinationPath C:\; \
	\
	Write-Host 'Removing ...'; \
	Remove-Item go.zip -Force; \
	\
	Write-Host 'Verifying install ("go version") ...'; \
	go version; \
	\
	Write-Host 'Complete.';

WORKDIR $GOPATH

####################################
# End install go
####################################



#WORKDIR c:/app
#RUN mkdir logs

#COPY ./run-registrator.sh bin
COPY . $GOPATH/src/github.com/gliderlabs/registrator
WORKDIR $GOPATH/src/github.com/gliderlabs/registrator
RUN cat C:\gopath\src\github.com\gliderlabs\registrator\vendor\golang.org\x\sys\windows\dll_windows.go
RUN git config --global http.https://gopkg.in.followRedirects true; \
	go get; \
	go build -v -o /bin/registrator; 
#\
#	rm -rf /go \
#	&& apk del --purge build-deps 


# From other Dockerfile
#FROM alpine:3.8
#ENTRYPOINT ["/bin/run-registrator.sh"]

#RUN mkdir /logs
#ENV GOPATH /go
#COPY ./run-registrator.sh /bin
#RUN chmod 755 /bin/run-registrator.sh
#COPY . /go/src/github.com/gliderlabs/registrator
#RUN apk --no-cache add -t build-deps build-base go git \
#	&& apk --no-cache add ca-certificates bash coreutils \
#	&& cd /go/src/github.com/gliderlabs/registrator \
#	&& export GOPATH=/go \
# && git config --global http.https://gopkg.in.followRedirects true \
#	&& go get \
#	&& go build -ldflags "-X main.Version=$(cat VERSION)" -o /bin/registrator \
#	&& rm -rf /go \
#	&& apk del --purge build-deps 